// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: ipaddress.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IPAddressService_AssignAddress_FullMethodName = "/ipman.IPAddressService/AssignAddress"
)

// IPAddressServiceClient is the client API for IPAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPAddressServiceClient interface {
	AssignAddress(ctx context.Context, in *AssignAddressRequest, opts ...grpc.CallOption) (*AssignAddressResponse, error)
}

type iPAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPAddressServiceClient(cc grpc.ClientConnInterface) IPAddressServiceClient {
	return &iPAddressServiceClient{cc}
}

func (c *iPAddressServiceClient) AssignAddress(ctx context.Context, in *AssignAddressRequest, opts ...grpc.CallOption) (*AssignAddressResponse, error) {
	out := new(AssignAddressResponse)
	err := c.cc.Invoke(ctx, IPAddressService_AssignAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPAddressServiceServer is the server API for IPAddressService service.
// All implementations must embed UnimplementedIPAddressServiceServer
// for forward compatibility
type IPAddressServiceServer interface {
	AssignAddress(context.Context, *AssignAddressRequest) (*AssignAddressResponse, error)
	mustEmbedUnimplementedIPAddressServiceServer()
}

// UnimplementedIPAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIPAddressServiceServer struct {
}

func (UnimplementedIPAddressServiceServer) AssignAddress(context.Context, *AssignAddressRequest) (*AssignAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAddress not implemented")
}
func (UnimplementedIPAddressServiceServer) mustEmbedUnimplementedIPAddressServiceServer() {}

// UnsafeIPAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPAddressServiceServer will
// result in compilation errors.
type UnsafeIPAddressServiceServer interface {
	mustEmbedUnimplementedIPAddressServiceServer()
}

func RegisterIPAddressServiceServer(s grpc.ServiceRegistrar, srv IPAddressServiceServer) {
	s.RegisterService(&IPAddressService_ServiceDesc, srv)
}

func _IPAddressService_AssignAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAddressServiceServer).AssignAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPAddressService_AssignAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAddressServiceServer).AssignAddress(ctx, req.(*AssignAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPAddressService_ServiceDesc is the grpc.ServiceDesc for IPAddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPAddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipman.IPAddressService",
	HandlerType: (*IPAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignAddress",
			Handler:    _IPAddressService_AssignAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipaddress.proto",
}
